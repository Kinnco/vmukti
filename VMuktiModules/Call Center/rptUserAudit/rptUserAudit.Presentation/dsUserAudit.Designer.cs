/* VMukti 2.0 -- An Open Source Video Communications Suite
*
* Copyright (C) 2008 - 2009, VMukti Solutions Pvt. Ltd.
*
* Hardik Sanghvi <hardik@vmukti.com>
*
* See http://www.vmukti.com for more information about
* the VMukti project. Please do not directly contact
* any of the maintainers of this project for assistance;
* the project provides a web site, forums and mailing lists      
* for your use.

* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.

* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.

* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>
 
*/
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1378
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

using System.Text;
using System;
using VMuktiAPI;
namespace rptUserAudit.Presentation
{


    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsUserAudit")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsUserAudit : global::System.Data.DataSet
    {

        private dtUserAuditDataTable tabledtUserAudit;

        //public static StringBuilder sb1;

        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;

        //public static StringBuilder CreateTressInfo()
        //{
        //    StringBuilder sb = new StringBuilder();
        //    sb.Append("User Is : " + VMuktiAPI.VMuktiInfo.CurrentPeer.DisplayName);
        //    sb.AppendLine();
        //    sb.Append("Peer Type is : " + VMuktiAPI.VMuktiInfo.CurrentPeer.CurrPeerType.ToString());
        //    sb.AppendLine();
        //    sb.Append("User's SuperNode is : " + VMuktiAPI.VMuktiInfo.CurrentPeer.SuperNodeIP);
        //    sb.AppendLine();
        //    sb.Append("User's Machine Ip Address : " + VMuktiAPI.GetIPAddress.ClsGetIP4Address.GetIP4Address());
        //    sb.AppendLine();
        //    sb.AppendLine("----------------------------------------------------------------------------------------");
        //    return sb;
        //}

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsUserAudit()
        {
            try
            {

                this.BeginInit();
                this.InitClass();
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                base.Tables.CollectionChanged += schemaChangedHandler;
                base.Relations.CollectionChanged += schemaChangedHandler;
                this.EndInit();
            }
            catch (Exception ex)
            {
                VMuktiHelper.ExceptionHandler(ex, "dsUserAudit()", "dsUserAudit.Designer.cs");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsUserAudit(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
            base(info, context, false)
        {
            try
            {
                if ((this.IsBinarySerialized(info, context) == true))
                {
                    this.InitVars(false);
                    global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                    this.Tables.CollectionChanged += schemaChangedHandler1;
                    this.Relations.CollectionChanged += schemaChangedHandler1;
                    return;
                }
                string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
                if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema))
                {
                    global::System.Data.DataSet ds = new global::System.Data.DataSet();
                    ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                    if ((ds.Tables["dtUserAudit"] != null))
                    {
                        base.Tables.Add(new dtUserAuditDataTable(ds.Tables["dtUserAudit"]));
                    }
                    this.DataSetName = ds.DataSetName;
                    this.Prefix = ds.Prefix;
                    this.Namespace = ds.Namespace;
                    this.Locale = ds.Locale;
                    this.CaseSensitive = ds.CaseSensitive;
                    this.EnforceConstraints = ds.EnforceConstraints;
                    this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                    this.InitVars();
                }
                else
                {
                    this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                }
                this.GetSerializationData(info, context);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                base.Tables.CollectionChanged += schemaChangedHandler;
                this.Relations.CollectionChanged += schemaChangedHandler;
            }
            catch (Exception ex)
            {
                VMuktiHelper.ExceptionHandler(ex, "dsUserAudit()", "dsUserAudit.Designer.cs");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtUserAuditDataTable dtUserAudit
        {
            get
            {
                return this.tabledtUserAudit;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return this._schemaSerializationMode;
            }
            set
            {
                this._schemaSerializationMode = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet()
        {
            try
            {
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            catch (Exception ex)
            {
                VMuktiHelper.ExceptionHandler(ex, "InitializeDerivedDataSet()", "dsUserAudit.Designer.cs");
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone()
        {
            try
            {
                dsUserAudit cln = ((dsUserAudit)(base.Clone()));
                cln.InitVars();
                cln.SchemaSerializationMode = this.SchemaSerializationMode;
                return cln;
            }
            catch (Exception ex)
            {
                VMuktiHelper.ExceptionHandler(ex, "Clone()", "dsUserAudit.Designer.cs");
                return null;

            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables()
        {
            try
            {
                return false;
            }
            catch (Exception ex)
            {
                VMuktiHelper.ExceptionHandler(ex, "ShouldSerializeTables()", "dsUserAudit.Designer.cs");
                return false;
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations()
        {
            try
            {
                return false;
            }
            catch (Exception ex)
            {
                VMuktiHelper.ExceptionHandler(ex, "ShouldSerializeRelations()", "dsUserAudit.Designer.cs");
                return false;

            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader)
        {
            try
            {
                if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema))
                {
                    this.Reset();
                    global::System.Data.DataSet ds = new global::System.Data.DataSet();
                    ds.ReadXml(reader);
                    if ((ds.Tables["dtUserAudit"] != null))
                    {
                        base.Tables.Add(new dtUserAuditDataTable(ds.Tables["dtUserAudit"]));
                    }
                    this.DataSetName = ds.DataSetName;
                    this.Prefix = ds.Prefix;
                    this.Namespace = ds.Namespace;
                    this.Locale = ds.Locale;
                    this.CaseSensitive = ds.CaseSensitive;
                    this.EnforceConstraints = ds.EnforceConstraints;
                    this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                    this.InitVars();
                }
                else
                {
                    this.ReadXml(reader);
                    this.InitVars();
                }
            }
            catch (Exception ex)
            {
                VMuktiHelper.ExceptionHandler(ex, "ReadXmlSerializable()", "dsUserAudit.Designer.cs");
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            try
            {
                global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
                this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
                stream.Position = 0;
                return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
            }
            catch (Exception ex)
            {
                VMuktiHelper.ExceptionHandler(ex, "GetSchemaSerializable()", "dsUserAudit.Designer.cs");
                return null;

            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars()
        {
            try
            {
                this.InitVars(true);
            }
            catch (Exception ex)
            {
                VMuktiHelper.ExceptionHandler(ex, "InitVars()", "dsUserAudit.Designer.cs");
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable)
        {
            try
            {
                this.tabledtUserAudit = ((dtUserAuditDataTable)(base.Tables["dtUserAudit"]));
                if ((initTable == true))
                {
                    if ((this.tabledtUserAudit != null))
                    {
                        this.tabledtUserAudit.InitVars();
                    }
                }
            }
            catch (Exception ex)
            {
                VMuktiHelper.ExceptionHandler(ex, "InitVars()", "dsUserAudit.Designer.cs");
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass()
        {
            try
            {
                this.DataSetName = "dsUserAudit";
                this.Prefix = "";
                this.Namespace = "http://tempuri.org/dsUserAudit.xsd";
                this.EnforceConstraints = true;
                this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
                this.tabledtUserAudit = new dtUserAuditDataTable();
                base.Tables.Add(this.tabledtUserAudit);
            }
            catch (Exception ex)
            {
                VMuktiHelper.ExceptionHandler(ex, "InitClass()", "dsUserAudit.Designer.cs");
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtUserAudit()
        {
            try
            {
                return false;
            }
            catch (Exception ex)
            {
                VMuktiHelper.ExceptionHandler(ex, "ShouldSerializedtUserAudit()", "dsUserAudit.Designer.cs");
                return false;

            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e)
        {
            try
            {
                if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove))
                {
                    this.InitVars();
                }
            }
            catch (Exception ex)
            {
                VMuktiHelper.ExceptionHandler(ex, "SchemaChanged()", "dsUserAudit.Designer.cs");
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs)
        {
            try
            {

                dsUserAudit ds = new dsUserAudit();
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
                any.Namespace = ds.Namespace;
                sequence.Items.Add(any);
                type.Particle = sequence;
                return type;
            }
            catch (Exception ex)
            {
                VMuktiHelper.ExceptionHandler(ex, "GetTypedDataSetSchema()", "dsUserAudit.Designer.cs");
                return null;
            }
        }
        public delegate void dtUserAuditRowChangeEventHandler(object sender, rptUserAudit.Presentation.dsUserAudit.dtUserAuditDataTable.dtUserAuditRowChangeEvent e);

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtUserAuditDataTable : global::System.Data.TypedTableBase<rptUserAudit.Presentation.dsUserAudit.dtUserAuditDataTable.dtUserAuditRow>
        {

            private global::System.Data.DataColumn columnTelephoneNumber;

            private global::System.Data.DataColumn columnDisposition;

            private global::System.Data.DataColumn columnStartDateAndTime;

            private global::System.Data.DataColumn columnEndDateAndTime;

            private global::System.Data.DataColumn columnDurationInSecond;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUserAuditDataTable()
            {
                try
                {
                    this.TableName = "dtUserAudit";
                    this.BeginInit();
                    this.InitClass();
                    this.EndInit();
                }
                catch (Exception ex)
                {
                    VMuktiHelper.ExceptionHandler(ex, "dtUserAuditDataTable()", "dsUserAudit.Designer.cs");
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtUserAuditDataTable(global::System.Data.DataTable table)
            {
                try
                {
                    this.TableName = table.TableName;
                    if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                    {
                        this.CaseSensitive = table.CaseSensitive;
                    }
                    if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                    {
                        this.Locale = table.Locale;
                    }
                    if ((table.Namespace != table.DataSet.Namespace))
                    {
                        this.Namespace = table.Namespace;
                    }
                    this.Prefix = table.Prefix;
                    this.MinimumCapacity = table.MinimumCapacity;
                }
                catch (Exception ex)
                {
                    VMuktiHelper.ExceptionHandler(ex, "dtUserAuditDataTable()", "dsUserAudit.Designer.cs");
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtUserAuditDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                try
                {
                    this.InitVars();
                }

                catch (Exception ex)
                {
                    VMuktiHelper.ExceptionHandler(ex, "dtUserAuditDataTable()", "dsUserAudit.Designer.cs");
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TelephoneNumberColumn
            {
                get
                {
                    return this.columnTelephoneNumber;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DispositionColumn
            {
                get
                {
                    return this.columnDisposition;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateAndTimeColumn
            {
                get
                {
                    return this.columnStartDateAndTime;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateAndTimeColumn
            {
                get
                {
                    return this.columnEndDateAndTime;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DurationInSecondColumn
            {
                get
                {
                    return this.columnDurationInSecond;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUserAuditRow this[int index]
            {
                get
                {
                    return ((dtUserAuditRow)(this.Rows[index]));
                }
            }

            public event dtUserAuditRowChangeEventHandler dtUserAuditRowChanging;

            public event dtUserAuditRowChangeEventHandler dtUserAuditRowChanged;

            public event dtUserAuditRowChangeEventHandler dtUserAuditRowDeleting;

            public event dtUserAuditRowChangeEventHandler dtUserAuditRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtUserAuditRow(dtUserAuditRow row)
            {
                try
                {

                    this.Rows.Add(row);
                }
                catch (Exception ex)
                {
                    VMuktiHelper.ExceptionHandler(ex, "AdddtUserAuditRow()", "dsUserAudit.Designer.cs");
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUserAuditRow AdddtUserAuditRow(string TelephoneNumber, string Disposition, string StartDateAndTime, string EndDateAndTime, string DurationInSecond)
            {
                try
                {
                    dtUserAuditRow rowdtUserAuditRow = ((dtUserAuditRow)(this.NewRow()));
                    object[] columnValuesArray = new object[] {
                        TelephoneNumber,
                        Disposition,
                        StartDateAndTime,
                        EndDateAndTime,
                        DurationInSecond};
                    rowdtUserAuditRow.ItemArray = columnValuesArray;
                    this.Rows.Add(rowdtUserAuditRow);
                    return rowdtUserAuditRow;
                }
                catch (Exception ex)
                {
                    VMuktiHelper.ExceptionHandler(ex, "AdddtUserAuditRow()", "dsUserAudit.Designer.cs");
                    return null;

                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                try
                {
                    dtUserAuditDataTable cln = ((dtUserAuditDataTable)(base.Clone()));
                    cln.InitVars();
                    return cln;
                }
                catch (Exception ex)
                {
                    VMuktiHelper.ExceptionHandler(ex, "Clone()", "dsUserAudit.Designer.cs");
                    return null;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                try
                {
                    return new dtUserAuditDataTable();
                }
                catch (Exception ex)
                {
                    VMuktiHelper.ExceptionHandler(ex, "CreateInstance()", "dsUserAudit.Designer.cs");
                    return null;

                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                try
                {
                    this.columnTelephoneNumber = base.Columns["TelephoneNumber"];
                    this.columnDisposition = base.Columns["Disposition"];
                    this.columnStartDateAndTime = base.Columns["StartDateAndTime"];
                    this.columnEndDateAndTime = base.Columns["EndDateAndTime"];
                    this.columnDurationInSecond = base.Columns["DurationInSecond"];
                }
                catch (Exception ex)
                {
                    VMuktiHelper.ExceptionHandler(ex, "InitVars()", "dsUserAudit.Designer.cs");
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                try
                {
                    this.columnTelephoneNumber = new global::System.Data.DataColumn("TelephoneNumber", typeof(string), null, global::System.Data.MappingType.Element);
                    base.Columns.Add(this.columnTelephoneNumber);
                    this.columnDisposition = new global::System.Data.DataColumn("Disposition", typeof(string), null, global::System.Data.MappingType.Element);
                    base.Columns.Add(this.columnDisposition);
                    this.columnStartDateAndTime = new global::System.Data.DataColumn("StartDateAndTime", typeof(string), null, global::System.Data.MappingType.Element);
                    base.Columns.Add(this.columnStartDateAndTime);
                    this.columnEndDateAndTime = new global::System.Data.DataColumn("EndDateAndTime", typeof(string), null, global::System.Data.MappingType.Element);
                    base.Columns.Add(this.columnEndDateAndTime);
                    this.columnDurationInSecond = new global::System.Data.DataColumn("DurationInSecond", typeof(string), null, global::System.Data.MappingType.Element);
                    base.Columns.Add(this.columnDurationInSecond);
                }
                catch (Exception ex)
                {
                    VMuktiHelper.ExceptionHandler(ex, "InitClass()", "dsUserAudit.Designer.cs");
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUserAuditRow NewdtUserAuditRow()
            {
                try
                {
                    return ((dtUserAuditRow)(this.NewRow()));
                }
                catch (Exception ex)
                {
                    VMuktiHelper.ExceptionHandler(ex, "NewdtUserAuditRow()", "dsUserAudit.Designer.cs");
                    return null;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                try
                {
                    return new dtUserAuditRow(builder);
                }
                catch (Exception ex)
                {
                    VMuktiHelper.ExceptionHandler(ex, "NewRowFromBuilder()", "dsUserAudit.Designer.cs");
                    return null;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                try
                {
                    return typeof(dtUserAuditRow);
                }
                catch (Exception ex)
                {
                    VMuktiHelper.ExceptionHandler(ex, "GetRowType()", "dsUserAudit.Designer.cs");
                    return null;

                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                try
                {
                    base.OnRowChanged(e);
                    if ((this.dtUserAuditRowChanged != null))
                    {
                        this.dtUserAuditRowChanged(this, new dtUserAuditRowChangeEvent(((dtUserAuditRow)(e.Row)), e.Action));
                    }
                }
                catch (Exception ex)
                {
                    VMuktiHelper.ExceptionHandler(ex, "OnRowChanged()", "dsUserAudit.Designer.cs");
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                try
                {

                    base.OnRowChanging(e);
                    if ((this.dtUserAuditRowChanging != null))
                    {
                        this.dtUserAuditRowChanging(this, new dtUserAuditRowChangeEvent(((dtUserAuditRow)(e.Row)), e.Action));
                    }
                }
                catch (Exception ex)
                {
                    VMuktiHelper.ExceptionHandler(ex, "OnRowChanging()", "dsUserAudit.Designer.cs");
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                try
                {
                    base.OnRowDeleted(e);
                    if ((this.dtUserAuditRowDeleted != null))
                    {
                        this.dtUserAuditRowDeleted(this, new dtUserAuditRowChangeEvent(((dtUserAuditRow)(e.Row)), e.Action));
                    }
                }
                catch (Exception ex)
                {
                    VMuktiHelper.ExceptionHandler(ex, "OnRowDeleted()", "dsUserAudit.Designer.cs");
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                try
                {
                    base.OnRowDeleting(e);
                    if ((this.dtUserAuditRowDeleting != null))
                    {
                        this.dtUserAuditRowDeleting(this, new dtUserAuditRowChangeEvent(((dtUserAuditRow)(e.Row)), e.Action));
                    }
                }
                catch (Exception ex)
                {
                    VMuktiHelper.ExceptionHandler(ex, "OnRowDeleting()", "dsUserAudit.Designer.cs");
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtUserAuditRow(dtUserAuditRow row)
            {
                try
                {
                    this.Rows.Remove(row);
                }
                catch (Exception ex)
                {
                    VMuktiHelper.ExceptionHandler(ex, "RemovedtUserAuditRow()", "dsUserAudit.Designer.cs");
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                try
                {
                    global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                    global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                    dsUserAudit ds = new dsUserAudit();
                    xs.Add(ds.GetSchemaSerializable());
                    global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                    any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                    any1.MinOccurs = new decimal(0);
                    any1.MaxOccurs = decimal.MaxValue;
                    any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                    sequence.Items.Add(any1);
                    global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                    any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                    any2.MinOccurs = new decimal(1);
                    any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                    sequence.Items.Add(any2);
                    global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                    attribute1.Name = "namespace";
                    attribute1.FixedValue = ds.Namespace;
                    type.Attributes.Add(attribute1);
                    global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                    attribute2.Name = "tableTypeName";
                    attribute2.FixedValue = "dtUserAuditDataTable";
                    type.Attributes.Add(attribute2);
                    type.Particle = sequence;
                    return type;
                }

                catch (Exception ex)
                {
                    VMuktiHelper.ExceptionHandler(ex, "GetTypedTableSchema()", "dsUserAudit.Designer.cs");
                    return null;
                }
            }

            /// <summary>
            ///Represents strongly named DataRow class.
            ///</summary>
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
            public partial class dtUserAuditRow : global::System.Data.DataRow
            {

                private dtUserAuditDataTable tabledtUserAudit;

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                internal dtUserAuditRow(global::System.Data.DataRowBuilder rb) :
                    base(rb)
                {
                    try
                    {
                        this.tabledtUserAudit = ((dtUserAuditDataTable)(this.Table));
                    }
                    catch (Exception ex)
                    {
                        VMuktiHelper.ExceptionHandler(ex, "dtUserAuditRow()", "dsUserAudit.Designer.cs");
                    }
                }
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public string TelephoneNumber
                {
                    get
                    {
                        try
                        {
                            return ((string)(this[this.tabledtUserAudit.TelephoneNumberColumn]));
                        }
                        catch (global::System.InvalidCastException e)
                        {
                            throw new global::System.Data.StrongTypingException("The value for column \'TelephoneNumber\' in table \'dtUserAudit\' is DBNull.", e);
                        }
                    }
                    set
                    {
                        this[this.tabledtUserAudit.TelephoneNumberColumn] = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public string Disposition
                {
                    get
                    {
                        try
                        {
                            return ((string)(this[this.tabledtUserAudit.DispositionColumn]));
                        }
                        catch (global::System.InvalidCastException e)
                        {
                            throw new global::System.Data.StrongTypingException("The value for column \'Disposition\' in table \'dtUserAudit\' is DBNull.", e);
                        }
                    }
                    set
                    {
                        this[this.tabledtUserAudit.DispositionColumn] = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public string StartDateAndTime
                {
                    get
                    {
                        try
                        {
                            return ((string)(this[this.tabledtUserAudit.StartDateAndTimeColumn]));
                        }
                        catch (global::System.InvalidCastException e)
                        {
                            throw new global::System.Data.StrongTypingException("The value for column \'StartDateAndTime\' in table \'dtUserAudit\' is DBNull.", e);
                        }
                    }
                    set
                    {
                        this[this.tabledtUserAudit.StartDateAndTimeColumn] = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public string EndDateAndTime
                {
                    get
                    {
                        try
                        {
                            return ((string)(this[this.tabledtUserAudit.EndDateAndTimeColumn]));
                        }
                        catch (global::System.InvalidCastException e)
                        {
                            throw new global::System.Data.StrongTypingException("The value for column \'EndDateAndTime\' in table \'dtUserAudit\' is DBNull.", e);
                        }
                    }
                    set
                    {
                        this[this.tabledtUserAudit.EndDateAndTimeColumn] = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public string DurationInSecond
                {
                    get
                    {
                        try
                        {
                            return ((string)(this[this.tabledtUserAudit.DurationInSecondColumn]));
                        }
                        catch (global::System.InvalidCastException e)
                        {
                            throw new global::System.Data.StrongTypingException("The value for column \'DurationInSecond\' in table \'dtUserAudit\' is DBNull.", e);
                        }
                    }
                    set
                    {
                        this[this.tabledtUserAudit.DurationInSecondColumn] = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public bool IsTelephoneNumberNull()
                {
                    try
                    {
                        return this.IsNull(this.tabledtUserAudit.TelephoneNumberColumn);
                    }
                    catch (Exception ex)
                    {
                        VMuktiHelper.ExceptionHandler(ex, "IsTelephoneNumberNull()", "dsUserAudit.Designer.cs");
                        return false;

                    }
                }
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public void SetTelephoneNumberNull()
                {
                    try
                    {
                        this[this.tabledtUserAudit.TelephoneNumberColumn] = global::System.Convert.DBNull;
                    }
                    catch (Exception ex)
                    {
                        VMuktiHelper.ExceptionHandler(ex, "SetTelephoneNumberNull()", "dsUserAudit.Designer.cs");
                    }
                }
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public bool IsDispositionNull()
                {
                    try
                    {
                        return this.IsNull(this.tabledtUserAudit.DispositionColumn);
                    }
                    catch (Exception ex)
                    {
                        VMuktiHelper.ExceptionHandler(ex, "IsDispositionNull()", "dsUserAudit.Designer.cs");
                        return false;
                    }
                }
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public void SetDispositionNull()
                {
                    try
                    {
                        this[this.tabledtUserAudit.DispositionColumn] = global::System.Convert.DBNull;
                    }
                    catch (Exception ex)
                    {
                        VMuktiHelper.ExceptionHandler(ex, "SetDispositionNull()", "dsUserAudit.Designer.cs");
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public bool IsStartDateAndTimeNull()
                {
                    try
                    {
                        return this.IsNull(this.tabledtUserAudit.StartDateAndTimeColumn);
                    }
                    catch (Exception ex)
                    {
                        VMuktiHelper.ExceptionHandler(ex, "IsStartDateAndTimeNull()", "dsUserAudit.Designer.cs");
                        return false;
                    }
                }
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public void SetStartDateAndTimeNull()
                {
                    try
                    {
                        this[this.tabledtUserAudit.StartDateAndTimeColumn] = global::System.Convert.DBNull;
                    }
                    catch (Exception ex)
                    {
                        VMuktiHelper.ExceptionHandler(ex, "SetStartDateAndTimeNull()", "dsUserAudit.Designer.cs");
                    }
                }
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public bool IsEndDateAndTimeNull()
                {
                    try
                    {
                        return this.IsNull(this.tabledtUserAudit.EndDateAndTimeColumn);
                    }
                    catch (Exception ex)
                    {
                        VMuktiHelper.ExceptionHandler(ex, "IsEndDateAndTimeNull()", "dsUserAudit.Designer.cs");
                        return false;
                    }
                }
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public void SetEndDateAndTimeNull()
                {
                    try
                    {
                        this[this.tabledtUserAudit.EndDateAndTimeColumn] = global::System.Convert.DBNull;
                    }
                    catch (Exception ex)
                    {
                        VMuktiHelper.ExceptionHandler(ex, "SetEndDateAndTimeNull()", "dsUserAudit.Designer.cs");
                    }
                }
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public bool IsDurationInSecondNull()
                {
                    try
                    {
                        return this.IsNull(this.tabledtUserAudit.DurationInSecondColumn);
                    }
                    catch (Exception ex)
                    {
                        VMuktiHelper.ExceptionHandler(ex, "IsDurationInSecondNull()", "dsUserAudit.Designer.cs");
                        return false;
                    }
                }
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public void SetDurationInSecondNull()
                {
                    try
                    {
                        this[this.tabledtUserAudit.DurationInSecondColumn] = global::System.Convert.DBNull;
                    }
                    catch (Exception ex)
                    {
                        VMuktiHelper.ExceptionHandler(ex, "SetDurationInSecondNull()", "dsUserAudit.Designer.cs");
                    }
                }
            }

            /// <summary>
            ///Row event argument class
            ///</summary>
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
            public class dtUserAuditRowChangeEvent : global::System.EventArgs
            {

                private dtUserAuditRow eventRow;

                private global::System.Data.DataRowAction eventAction;

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public dtUserAuditRowChangeEvent(dtUserAuditRow row, global::System.Data.DataRowAction action)
                {
                    try
                    {
                        this.eventRow = row;
                        this.eventAction = action;
                    }
                    catch (Exception ex)
                    {
                        VMuktiHelper.ExceptionHandler(ex, "dtUserAuditRowChangeEvent()", "dsUserAudit.Designer.cs");
                    }
                }
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public dtUserAuditRow Row
                {
                    get
                    {
                        return this.eventRow;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public global::System.Data.DataRowAction Action
                {
                    get
                    {
                        return this.eventAction;
                    }
                }
            }
        }
    }

#pragma warning restore 1591
}